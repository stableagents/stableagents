#!/usr/bin/env python3
"""
StableAgents Secure API Key Manager CLI
"""
import sys
import os
import argparse
import getpass

# Add the project root to the path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def main():
    parser = argparse.ArgumentParser(description='StableAgents Secure API Key Manager')
    parser.add_argument('command', choices=['status', 'setup', 'clear', 'list', 'stripe-setup', 'cancel'], 
                       help='Command to run')
    parser.add_argument('--provider', choices=['openai', 'anthropic', 'google'], 
                       help='Provider for specific commands')
    parser.add_argument('--key', help='API key (for setup)')
    parser.add_argument('--stripe-secret', help='Stripe secret key')
    parser.add_argument('--stripe-publishable', help='Stripe publishable key')
    
    args = parser.parse_args()
    
    try:
        from stableagents.api_key_manager import SecureAPIKeyManager
        manager = SecureAPIKeyManager()
        
        if args.command == 'status':
            status = manager.check_payment_status()
            print("üîê Secure API Key Manager Status")
            print("=" * 35)
            
            if status.get('subscribed'):
                print(f"Subscription Status: ‚úÖ Active")
                print(f"Status: {status.get('status', 'active')}")
                if status.get('subscription_date'):
                    print(f"Started: {status['subscription_date']}")
                if status.get('next_billing_date'):
                    print(f"Next Billing: {status['next_billing_date']}")
                if status.get('subscription_id'):
                    print(f"Subscription ID: {status['subscription_id'][:8]}...")
            else:
                print(f"Subscription Status: ‚ùå Not Subscribed")
            
            print(f"API Keys Provided: {len(status.get('api_keys_provided', []))}")
            
            if status.get('api_keys_provided'):
                print("\nAvailable Providers:")
                for provider in status['api_keys_provided']:
                    print(f"  ‚úÖ {provider}")
            else:
                print("\nNo API keys configured")
            
            # Show Stripe status
            stripe_config = manager.get_stripe_config()
            if stripe_config.get('stripe_available'):
                print(f"\nStripe Status: {'‚úÖ Configured' if stripe_config.get('stripe_secret_key') else '‚ùå Not Configured'}")
            else:
                print("\nStripe Status: ‚ùå Not Available")
                
        elif args.command == 'cancel':
            print("üö´ Cancel Subscription")
            print("=" * 25)
            
            if manager.stripe_manager:
                if manager.stripe_manager.cancel_subscription():
                    print("‚úÖ Subscription will be canceled at the end of the current period")
                else:
                    print("‚ùå Failed to cancel subscription")
            else:
                print("‚ùå No Stripe manager available")
                print("üí° You can manually remove the subscription status file:")
                print("   rm ~/.stableagents/payment_status.json")
                
        elif args.command == 'stripe-setup':
            print("üí≥ Stripe Configuration")
            print("=" * 25)
            
            if args.stripe_secret and args.stripe_publishable:
                manager.setup_stripe_keys(args.stripe_secret, args.stripe_publishable)
            else:
                print("Please provide Stripe keys:")
                print("Usage: stableagents-keys stripe-setup --stripe-secret sk_test_... --stripe-publishable pk_test_...")
                print()
                print("Or set environment variables:")
                print("export STRIPE_SECRET_KEY='sk_test_...'")
                print("export STRIPE_PUBLISHABLE_KEY='pk_test_...'")
                
        elif args.command == 'setup':
            print("üîê Secure API Key Setup")
            print("=" * 25)
            
            # Show options
            print("You have three options:")
            print()
            print("1. üí≥ Subscribe for $20/month")
            print("2. üîë Bring your own API keys")
            print("3. üè† Use local models only")
            print()
            
            choice = input("Enter your choice (1-3): ").strip()
            
            if choice == "1":
                # Payment option
                print("\nüí≥ Monthly Subscription Setup")
                print("=" * 30)
                if manager.process_payment():
                    print("‚úÖ Subscription active!")
                    
                    # Get password
                    while True:
                        password = getpass.getpass("Enter a password to encrypt your API keys: ")
                        if password:
                            confirm = getpass.getpass("Confirm password: ")
                            if password == confirm:
                                break
                            else:
                                print("Passwords don't match. Please try again.")
                        else:
                            print("Password cannot be empty.")
                    
                    if manager.provide_api_keys_after_payment(password):
                        print("‚úÖ API keys have been securely stored!")
                        print("üìÖ Your subscription will renew monthly")
                    else:
                        print("‚ùå Failed to provide API keys")
                else:
                    print("‚ùå Subscription setup failed")
                    
            elif choice == "2":
                # Custom keys
                print("\nüîë Custom API Key Setup")
                print("=" * 25)
                
                # Get password
                while True:
                    password = getpass.getpass("Enter a password to encrypt your API keys: ")
                    if password:
                        confirm = getpass.getpass("Confirm password: ")
                        if password == confirm:
                            break
                        else:
                            print("Passwords don't match. Please try again.")
                    else:
                        print("Password cannot be empty.")
                
                # Reset encryption
                manager.reset_encryption()
                
                # Collect keys
                providers = ["openai", "anthropic", "google"]
                keys_set = False
                
                for provider in providers:
                    print(f"\n{provider.capitalize()} API Key (press Enter to skip):")
                    api_key = getpass.getpass("> ")
                    
                    if api_key:
                        if manager.set_api_key(provider, api_key, password):
                            print(f"‚úÖ {provider.capitalize()} key stored securely")
                            keys_set = True
                        else:
                            print(f"‚ùå Failed to store {provider.capitalize()} key")
                
                if keys_set:
                    print("\n‚úÖ API keys have been securely stored!")
                else:
                    print("\n‚ö†Ô∏è  No API keys were set")
                    
            elif choice == "3":
                print("‚úÖ Local model mode selected")
                print("üí° To use local models, download GGUF files to ~/.stableagents/models/")
                
            else:
                print("Invalid choice")
                
        elif args.command == 'clear':
            print("üóëÔ∏è  Clearing all stored API keys...")
            manager.reset_encryption()
            print("‚úÖ All API keys have been cleared")
            
        elif args.command == 'list':
            print("üìã Available API Key Providers")
            print("=" * 30)
            providers = ["openai", "anthropic", "google"]
            
            for provider in providers:
                print(f"  ‚Ä¢ {provider.capitalize()}")
                print(f"    - OpenAI GPT models" if provider == "openai" else 
                      f"    - Anthropic Claude models" if provider == "anthropic" else
                      f"    - Google Gemini models")
            print()
            print("üí° Use 'stableagents-keys setup' to configure keys")
            
    except ImportError:
        print("‚ùå Secure API Key Manager not available")
        print("   Make sure all dependencies are installed")
        return 1
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return 1
    
    return 0

if __name__ == '__main__':
    sys.exit(main()) 